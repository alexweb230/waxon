// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$arr-hov-name: 'arr-hov';
$arr-hov-x: 0px;
$arr-hov-y: 57px;
$arr-hov-offset-x: 0px;
$arr-hov-offset-y: -57px;
$arr-hov-width: 40px;
$arr-hov-height: 73px;
$arr-hov-total-width: 107px;
$arr-hov-total-height: 130px;
$arr-hov-image: 'sprite.png';
$arr-hov: (0px, 57px, 0px, -57px, 40px, 73px, 107px, 130px, 'sprite.png', 'arr-hov', );
$arr-sl-name: 'arr-sl';
$arr-sl-x: 67px;
$arr-sl-y: 0px;
$arr-sl-offset-x: -67px;
$arr-sl-offset-y: 0px;
$arr-sl-width: 40px;
$arr-sl-height: 73px;
$arr-sl-total-width: 107px;
$arr-sl-total-height: 130px;
$arr-sl-image: 'sprite.png';
$arr-sl: (67px, 0px, -67px, 0px, 40px, 73px, 107px, 130px, 'sprite.png', 'arr-sl', );
$cart-name: 'cart';
$cart-x: 67px;
$cart-y: 100px;
$cart-offset-x: -67px;
$cart-offset-y: -100px;
$cart-width: 18px;
$cart-height: 25px;
$cart-total-width: 107px;
$cart-total-height: 130px;
$cart-image: 'sprite.png';
$cart: (67px, 100px, -67px, -100px, 18px, 25px, 107px, 130px, 'sprite.png', 'cart', );
$logo-name: 'logo';
$logo-x: 0px;
$logo-y: 0px;
$logo-offset-x: 0px;
$logo-offset-y: 0px;
$logo-width: 66px;
$logo-height: 56px;
$logo-total-width: 107px;
$logo-total-height: 130px;
$logo-image: 'sprite.png';
$logo: (0px, 0px, 0px, 0px, 66px, 56px, 107px, 130px, 'sprite.png', 'logo', );
$search-name: 'search';
$search-x: 67px;
$search-y: 74px;
$search-offset-x: -67px;
$search-offset-y: -74px;
$search-width: 24px;
$search-height: 25px;
$search-total-width: 107px;
$search-total-height: 130px;
$search-image: 'sprite.png';
$search: (67px, 74px, -67px, -74px, 24px, 25px, 107px, 130px, 'sprite.png', 'search', );
$spritesheet-width: 107px;
$spritesheet-height: 130px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($arr-hov, $arr-sl, $cart, $logo, $search, );
$spritesheet: (107px, 130px, 'sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url('img/sprite/#{$sprite-image}');
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
